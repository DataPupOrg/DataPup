import { IntellisenseProvider } from '../IntellisenseProvider'
import type { SQLContext, DatabaseSchema, Position } from '../types'
import { Monaco } from '@monaco-editor/react'

export class MySQLIntellisenseProvider extends IntellisenseProvider {
  getDatabaseSpecificKeywords(): string[] {
    return [
      'AUTO_INCREMENT',
      'ENGINE',
      'CHARSET',
      'COLLATE',
      'ROW_FORMAT',
      'KEY_BLOCK_SIZE',
      'COMMENT',
      'DELAY_KEY_WRITE',
      'PACK_KEYS',
      'CHECKSUM',
      'CONNECTION',
      'DATA DIRECTORY',
      'INDEX DIRECTORY',
      'INSERT_METHOD',
      'MAX_ROWS',
      'MIN_ROWS',
      'PASSWORD',
      'STATS_AUTO_RECALC',
      'STATS_PERSISTENT',
      'STATS_SAMPLE_PAGES',
      'STORAGE',
      'TABLESPACE',
      'UNION',
      'PARTITION',
      'SUBPARTITION',
      'PARTITIONS',
      'LINEAR',
      'HASH',
      'KEY',
      'RANGE',
      'LIST',
      'VALUES',
      'LESS THAN',
      'IN',
      'MAXVALUE',
      'STORAGE ENGINE',
      'INNODB',
      'MYISAM',
      'MEMORY',
      'CSV',
      'ARCHIVE',
      'BLACKHOLE',
      'PERFORMANCE_SCHEMA',
      'FEDERATED',
      'EXAMPLE',
      'MERGE',
      'NDB',
      'NDBCLUSTER',
      'FALCON',
      'MARIA',
      'ARIA',
      'SEQUENCE',
      'TEMPORARY',
      'IF NOT EXISTS',
      'IF EXISTS',
      'IGNORE',
      'REPLACE',
      'ON DUPLICATE KEY UPDATE',
      'LOW_PRIORITY',
      'HIGH_PRIORITY',
      'DELAYED',
      'STRAIGHT_JOIN',
      'SQL_SMALL_RESULT',
      'SQL_BIG_RESULT',
      'SQL_BUFFER_RESULT',
      'SQL_CACHE',
      'SQL_NO_CACHE',
      'SQL_CALC_FOUND_ROWS',
      'FOR UPDATE',
      'LOCK IN SHARE MODE',
      'SHARE MODE',
      'NOWAIT',
      'SKIP LOCKED',
      'GROUP BY',
      'HAVING',
      'ORDER BY',
      'LIMIT',
      'OFFSET',
      'PROCEDURE',
      'INTO OUTFILE',
      'INTO DUMPFILE',
      'FOR UPDATE',
      'LOCK IN SHARE MODE',
      'SHARE MODE',
      'NOWAIT',
      'SKIP LOCKED',
      'GROUP BY',
      'HAVING',
      'ORDER BY',
      'LIMIT',
      'OFFSET',
      'PROCEDURE',
      'INTO OUTFILE',
      'INTO DUMPFILE'
    ]
  }

  getDatabaseSpecificFunctions(): string[] {
    return [
      'NOW',
      'CURDATE',
      'CURTIME',
      'CURRENT_DATE',
      'CURRENT_TIME',
      'CURRENT_TIMESTAMP',
      'LOCALTIME',
      'LOCALTIMESTAMP',
      'UNIX_TIMESTAMP',
      'FROM_UNIXTIME',
      'DATE_FORMAT',
      'STR_TO_DATE',
      'DATE_ADD',
      'DATE_SUB',
      'DATEDIFF',
      'TIMEDIFF',
      'TIMESTAMPADD',
      'TIMESTAMPDIFF',
      'YEAR',
      'MONTH',
      'DAY',
      'HOUR',
      'MINUTE',
      'SECOND',
      'MICROSECOND',
      'QUARTER',
      'WEEK',
      'WEEKDAY',
      'WEEKOFYEAR',
      'DAYOFWEEK',
      'DAYOFYEAR',
      'DAYOFMONTH',
      'MONTHNAME',
      'DAYNAME',
      'LAST_DAY',
      'MAKEDATE',
      'MAKETIME',
      'PERIOD_ADD',
      'PERIOD_DIFF',
      'TO_DAYS',
      'FROM_DAYS',
      'SEC_TO_TIME',
      'TIME_TO_SEC',
      'CONCAT',
      'CONCAT_WS',
      'SUBSTRING',
      'SUBSTR',
      'LEFT',
      'RIGHT',
      'LENGTH',
      'CHAR_LENGTH',
      'LOWER',
      'UPPER',
      'TRIM',
      'LTRIM',
      'RTRIM',
      'REPLACE',
      'REVERSE',
      'REPEAT',
      'SPACE',
      'LPAD',
      'RPAD',
      'LOCATE',
      'INSTR',
      'POSITION',
      'FIND_IN_SET',
      'FIELD',
      'ELT',
      'MAKE_SET',
      'EXPORT_SET',
      'BIN',
      'OCT',
      'HEX',
      'UNHEX',
      'CHAR',
      'ASCII',
      'ORD',
      'BIT_LENGTH',
      'CHAR_LENGTH',
      'CHARACTER_LENGTH',
      'SOUNDEX',
      'MATCH',
      'AGAINST',
      'AES_ENCRYPT',
      'AES_DECRYPT',
      'DES_ENCRYPT',
      'DES_DECRYPT',
      'ENCODE',
      'DECODE',
      'ENCRYPT',
      'MD5',
      'SHA1',
      'SHA2',
      'PASSWORD',
      'OLD_PASSWORD',
      'RAND',
      'RANDOM_BYTES',
      'UUID',
      'UUID_SHORT',
      'ISNULL',
      'IFNULL',
      'NULLIF',
      'IF',
      'CASE',
      'WHEN',
      'THEN',
      'ELSE',
      'END',
      'GREATEST',
      'LEAST',
      'COALESCE',
      'INTERVAL',
      'BETWEEN',
      'IN',
      'NOT IN',
      'EXISTS',
      'NOT EXISTS',
      'ALL',
      'ANY',
      'SOME',
      'UNION',
      'UNION ALL',
      'INTERSECT',
      'EXCEPT',
      'MINUS',
      'DISTINCT',
      'DISTINCTROW',
      'HIGH_PRIORITY',
      'STRAIGHT_JOIN',
      'SQL_SMALL_RESULT',
      'SQL_BIG_RESULT',
      'SQL_BUFFER_RESULT',
      'SQL_CACHE',
      'SQL_NO_CACHE',
      'SQL_CALC_FOUND_ROWS'
    ]
  }

  getDatabaseSpecificOperators(): string[] {
    return [
      '<=>',    // NULL-safe equal
      'IS NULL',
      'IS NOT NULL',
      'LIKE',
      'NOT LIKE',
      'REGEXP',
      'NOT REGEXP',
      'RLIKE',
      'NOT RLIKE',
      'SOUNDS LIKE',
      'DIV',    // Integer division
      'MOD',    // Modulo
      'XOR',    // Bitwise XOR
      '&',      // Bitwise AND
      '|',      // Bitwise OR
      '^',      // Bitwise XOR
      '~',      // Bitwise NOT
      '<<',     // Left shift
      '>>',     // Right shift
      'BINARY', // Binary string
      'COLLATE' // Collation
    ]
  }

  protected quoteIdentifier(identifier: string): string {
    // MySQL uses backticks for identifiers
    return `\`${identifier.replace(/`/g, '``')}\``
  }

  getCompletionItems(
    monaco: Monaco,
    model: any,
    position: Position,
    context: SQLContext,
    schema?: DatabaseSchema
  ): any[] {
    const items = super.getCompletionItems(monaco, model, position, context, schema)

    // Add MySQL-specific operators
    const operators = this.getDatabaseSpecificOperators().map(op => ({
      label: op,
      kind: monaco.languages.CompletionItemKind.Operator,
      insertText: op,
      detail: 'MySQL operator',
      documentation: `MySQL-specific operator: ${op}`
    }))

    return [...items, ...operators]
  }

  getDatabaseSpecificDataTypes(): string[] {
    return [
      'TINYINT',
      'SMALLINT',
      'MEDIUMINT',
      'INT',
      'INTEGER',
      'BIGINT',
      'FLOAT',
      'DOUBLE',
      'DECIMAL',
      'NUMERIC',
      'BIT',
      'BOOL',
      'BOOLEAN',
      'DATE',
      'DATETIME',
      'TIMESTAMP',
      'TIME',
      'YEAR',
      'CHAR',
      'VARCHAR',
      'BINARY',
      'VARBINARY',
      'TINYBLOB',
      'BLOB',
      'MEDIUMBLOB',
      'LONGBLOB',
      'TINYTEXT',
      'TEXT',
      'MEDIUMTEXT',
      'LONGTEXT',
      'ENUM',
      'SET',
      'JSON',
      'GEOMETRY',
      'POINT',
      'LINESTRING',
      'POLYGON',
      'MULTIPOINT',
      'MULTILINESTRING',
      'MULTIPOLYGON',
      'GEOMETRYCOLLECTION',
      'SERIAL',
      'UNSIGNED',
      'ZEROFILL',
      'CHARACTER SET',
      'COLLATE',
      'ASCII',
      'UNICODE',
      'UTF8',
      'UTF8MB4',
      'LATIN1',
      'BINARY',
      'VARBINARY'
    ]
  }
}
